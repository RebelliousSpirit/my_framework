1) Принцип работы сайта:
    - все url-запросы (при помощи настройки htaccess) будут направлятся в файл /index.php
    - в /index.php создаем объект класса /core/base/controllers/BaseRouteController в котором происходит анализ запроса
      и в зависимости какой запрос(синхронный или асинхронный) будет подключен соотвествующий контроллер
    -



   Доп.информация:
   1)Принципы создания парсера:
   - Не желательно использовать однопоточную систему обработки ссылок.(Пример в файле test\curl.php)
   - Использовать рекурсивные методы не желательно т.к метод при вызове самого себя, в память сохраняются все текущие
   переменные и тем самым может случится перезаполнение памяти(Пример в файле test\curl.php стр 142)
   - библиотека CURL не выдает предупреждение о переполнении памяти. Из-за этого невозможно знать переполнена ли память
   в результате выполнения скрипта, (сервер просто падает и мы не знаем о этом)
   - обойти антипарсинговую ситему можно через проки-сервера

   2) Отличие цикла while от do-while - в том что while проверяет то что ее передали на вход и если ничего не передали, то
   цикл не выполнится ни разу, do-while в любом случае выполнится один раз

   3) В проверках ставь самый быстрый способ проверки первым и самый медленный последним.
   (core\admin\controllers\CreateSitemapController.php строка 351-354)

   4) TRANCATE - команда sql для удаления записей в БД и при этом поностью обновляет первичный ключ
      DELETE - команда sql для удаления записей в БД и при этом НЕ обновляет первичный ключ

   5) Get запрос: http://sait.com/add?page=1&id=1 - подстрока с get-запросом - '?page=1&id=1'
       Данные get-запроса хранятся в суперглобальном массиве POST или GET['QUERY_STRING']

   6) Распрастраненое расширение шифрования для php encrypt начиная с версии php 7.1 устарело.

   7) Типы связей записей в таблице данных:
    - один ко многих. Это когда например запись A с id = 1 связана с записями B, C, D по их parent_id равное соотвест
     венно 1;
    - многие ко многим. Для осуществления этого заводится отдельная таблица. В ней например указывается, что запись A с
     id = 1 связана с записями B, C, D по id.
     Пример можно найти в scheme my_framework_one таблицах students, teachers, students_teachers, где таблица students_teachers
     как раз таки выступает для связи студентов и учителей по их первичным ключам.
   8) Приведение типов. Например: строку с помощью инструкции array привести к массиву, а с массивом ничего не произойдет
    т.к он и так изначально массив. Пример использования на стр 138 метода createOrder класса core/base/models/BaseModelMethods.php
        $str = 'string';
        $arr1 = ['string'];
        $arr['str'] = (array) $str; // ['str' => ['string']]
        $arr['str'] = (array) $arr1; // ['str' => ['string']]
   9) В этом проетке мы создаем мини ORM. Расположенна он а в директории core/base/models
        - Join(присоединение таблиц)
          В запросе:
          get('table1',[
                'fields'=>['name'],
                'join' => [
                    'table2' => [
                        on => [...]
                    ],
                    'table3' => [
                        on => [
                            'table' => 'table1'
                        ]
                    ]
                ]
           ]);
           table2 стыкуется с table1, table3 стыкуется с table1. Если явно не указать параметра 'table' в 'on',
           то table3 будет стыковатся с table2.
           Например:
             get('table1',[
                'fields'=>['name'],
                'join' => [
                    'table2' => [
                        on => [...]
                    ],
                    'table3' => [
                        on => [...]
                    ]
                ]
              ]);


Конфигурации сервера:
    - php 5.6
    - apache 2.4
    - MySQL 5.7x64


1)Создаем директории:
core - содержит всю управлющую структуру сайта
В папке core: a)base служит для содержит базовой настройки сайта: папки MVC, settings(фундаментальные настройки сайта),
exceptions(содержит исключения), messages(тело сообщений о ошибках, предупреждения) - представлено в виде массивов с
переводами сообщений;
b)admin - содержит папки и файлы админки сайта;
controllers, models, views - папки модели MVC
- controllers
    AddController.php - контроллер добавления данных в БД
    BaseAdmin.php - базовый контроллер, содержащий методы для работы контроллеров админки
    IndexController.php - контроллер отображения админ. части сайта(ВНИМАНИЕ при переходе на IndexController происходит
    редирект на ShowController)
    ShowController.php - контроллер отображения админ. части сайта
    CreateSitemapController - отвечает за создание карты сайта - (парсинг)
- expansion - расширения админ. сайта
- models - модель, отвечает за соединение с БД и отправки запросов к БД
-
Сообщение о ошибках(при вводе данных в формах) в представлениях выводятся в подвале сайта.
c)plugins - содержит расширения сайта;
e) user - пользовательская часть сайта
d)log - содержит логигованые ошибки

libraries - дополнительные библиотеки
- FileEdit - отвечает за редактирование/добавление файлов в БД
- functions - служебные функции
- textModify - редактирование текста(транслитирация)

logs - содержит логи ошибок

userfiles - файлы, изображения которые будет добавлять пользователь сайта

templates - содержит шаблоны сайта(в папке default хранятся шаблоны по умолчанию, на случай смены шаблонизатора)



2) ВАЖНО в файле index.php будут содержатся все запросы приходящие извне
 в index.php должны приходить все запросы на сайт, добиваемся это при помощи настроек .htaccess
3) файл .htaccess
    содежит команды обращеные к серверу

    php_flag magic_quotes_gpc off  - отключаем экранирование ковычек, т.к на разных серверах эта функция м.б включена или
    не включена

    RewriteEngine on, RewriteCond %(REQUEST_FILENAME) !-f, RewriteRule ^(.*) index.php  - означает включить функцию
    перенаправления, если запрос это не файл, то перевести запрос на индексную страницу

    #RewriteCond %(REQUEST_FILENAME) !-d - если запрос это не папка, отключент т.к есть система контроля маршрутов
4) пишим код в файлах в таком порядке: Index.php, config.php, core\settings\internal_settings.php,
5) указываем настройки путей и название запрашиваемых полей из БД в core\settings\Settings.php,
6) для того чтобы включить xDebug нужно раскоментировать в php.ini(в open server открыть дополнительно\конфигурации
\php-5.6) строки:
zend_extension="%sprogdir%/modules/php/%phpdriver%/ext/php_xdebug.dll"
xdebug.default_enable = 1
xdebug.remote_enable = 1
xdebug.remote_port = 9000

 - Зайти в редакторе file>settings>languages&framework>php
 - в cli interpreter - переключить в interpreter. Для этого выбрать в настройках путей: C:\OSPanel\modules\php\PHP_5.6\php.exe
 версия php выбрать в соотвествии с настройками сервера
7) Далее для демонстрации работы плагинов создаем класс core\base\settings\ShopSettings, где реализовано
 слияние массивов настроек плагина с базовыми настройками фреймворка, которые хранятся в классе core\base\settings
 \Settings ВАЖНО обратить внимание на стр 24-33.
8) Далее создаем файл RouteController - отвечающий для формирование путей
9) Создаем файл с классом BaseController(абстрактный класс от которого в последующем будут наследоватся другие контрол
еры) - содержит базовые методы и свойства для работы других контролеров-потомков
От него наследуются.
10) Вспомогательные методы для класса BaseController создаем в трейте BaseMethods.php
11) Создаем трейт с шаблоном base/controllers/Singleton, который будут наследовать классы: RouteController, BaseController, Settings,
BaseModel
12) Создаем файл обработки исключений роутинга  RouteException. Массив с сообщение о ошибке хранится в messages.php в
той директории.ВАЖНО записать строку "RewriteCond %(REQUEST_FILENAME) !-favicon.ico" или создать файл favicon.ico в
корне сайта т.к браузер будет отправлять повторный запрос на сервер не найдя этот файл.В результате чего будут
логироватся двойные ошибки.
13) Создаем контроллер админки сайта ВНИМАНИЕ важная инфа. В проекте будем использовать MySQL 5.7 x64 т.к он наиболее
требователен к запросам.В MySQL 5.6 в запросах могут игнорироватся обязательные поля, и типы данных.(Например при отпра
вке можно спокойно подставить строковые переменные вместо числовых)
При подключении phpStorm к БД важно в файле php.ini на строке data.timezone указать "Asia/Almaty" и настройках самого
редактора установить коректный часовой пояс.Для этого жмем в углу экрана значок "database", затем в открывшемся окошке
жмем значок "+" > data source > MySQL В открывшемся окне заполняем поля: user, password, dataname и нажимаем test connection
В закладке advanced найти serverdtimezone и вписать туда "Asia/Almaty"
14) Создаем базовый класс BaseModel для моделей в директории core/base/models
В запросах к БД можно использовать 2 метода: один ко многим, многие ко многим
Доп.методы для работы BaseModel хранятся в base/models/BaseModelMethods.php
КАЖДАЯ
15) Создаем модель Model в директории core/admin/models которая наследуется от BaseModel
16) Создаем BaseAdmin в core/admin/controllers - загружает статические части сайта(шапку и подвал). Абстрактный класс от
которого будут наследоватся контроллеры админки.Этот класс позволяет подключать расширения, которые могут в дальнейшем
проводить доп. обработку полученных данных из БД. РАСШИРЕНИЯ для админки находятся в директории admin/expansion
ВАЖНО в последующих контролерах обзятельно должен быть реализован метод inputData() и в нем вызван метод execBase
17) http://my_sait.com/admin/show/teachers/2 - 'admin' - админская часть сайта, show - контроллер загрузки админки сайта,
teachers - имя таблицы БД, 2 - id поля таблицы БД
18) Особенности таблицы БД: parent_id - id родителя, menu_position - позиция в меню админки. Например: есть 2 таблицы БД.
'categories' и 'products'.У 'products' можно создать внешний ключ, который будет ссылаться на первичный ключ из таблицы
'categories'.При этом тогда нельзя будет редактировать, удалять первичный ключ или запись с этим ключом в таблицы
'categories'. Если включить директиву 'cascade' у внешнего ключа таблицы 'products', то при изменении первичного ключа
таблицы 'products' будет соотвественно менятся и внешний ключ табл. 'products'.
Если включить директиву 'set null' у внешнего ключа таблицы 'products', то при удалении первичного ключа
таблицы 'products',то в внешний ключ табл. 'products' запишется null. В НАШЕМ проекте мы используем 'set null'.
Данные о внешних ключах хранятся в отдельной таблице БД с именем information_schema в
19) Особенности проектирования контролеров админки.Например ShowController должен получать данные только из
класса Model (admin/model/model.php), а не откуда бы еще.Но на момент этой записи это не было исправлено т.к в  Model
(admin/model/model.php) не было своего конструктора.
20) ВАЖНО Если передать ссылки на свойства объекта А в свойства другого объекта Б, то при измении свойств объекта Б поме
няются и своства объекта A. Демонстрация на стр199 admin/controllers/BaseAdmin
21)Создаем класс admin/controllers/ShowController на который идет редирект с IndexController. Отвечает за отображение
страницы админ. части сайта.Представление находится:  core/admin/views/show.php.
22) Создаем класс admin/controllers/AddController/. Отвечает за отображение интерфейса в контентной части админ. панели
, который добавляет данные в таблицу(админ) БД, за добавление новых записей в таблицы БД. Представление находится:
core/admin/views/add.php. Блоки для формирования add.php. в core/admin/views/form_templates.
23) Реализуем метод множественной вставки в таблицу БД.
24) Создаем в директории core\admin\views\include\form_templates шаблоны для формирования блоков формы
 путь до блоков формы можно менять в настройках Settings
25) Создаем EditController в директории core\admin\controllers.
26) В БД по идее должна быть таблица old_alias - содержит старые alias записей в таблицах.Они нужны для SEO. Например
при изменении записи в таблице, изменяется и его alias.Он в свою очередь входит в URL-строку запроса. ВАЖНО при обращении
поисковой системе к этой обновленой записи мы должны сообщить, что эта та же старая запись и ее путь такой же что и был
до этого. Тут то и нужен старый alias.
27) Создаем класс для работы с файлами \libraries\FileEdit.php. По умолчанию в php стоит ограничение на закачку файлов,
не более 4mb. Снять можно указав в .htaccess директиву 'php_value upload_max_filesize 100M'(ограничение в 100Мб)
ВАЖНО на строке 109 метода checkFile можно переполнить стэк вызывовов т.к там происходит рекурсия.
Подробно: там в формировании названия файла участвует функция hash, которая очень быстро работает(выдает одинаковые
значения) и в результате чего число рекурсивных вызвовов превышает лимит на стэк вызовов.Правится это функцией mt_rand()
28) Дописать про парсинг
29) Создаем класс \core\base\controllers\BaseRouteController.php, который будет проверять какой тип запроса пришел
синхронный или асинхронный и соотвественно подключать в соотвествующий контроллер, в котором затем будет обрабатыватся
этот запрос.
30) Создаем класс \core\base\controllers\BaseAjaxController.php, который отвечает за асинхронные запросы и является точкой
входа асинхронных запросов.Желтаельно делать такую однй точку входа для удобного поиска запросов и их проверки.От него
наследуются: admin\controllers\AjaxController.php, user\controllers\AjaxController.php.
31) Создаем класс core/base/libraries/Crypt для шифрования и дешефрования куки.
32) Дорабатываем класс core/base/models/BaseModel.php. ВАЖНО при работе с большой БД использование псевдонимов в SQL-запросах
нежелательно т.к это сильно нагружает сервер и запрос будет продолжительным. Например: 'SELECT id as student_id FROM
students WHERE id = 1'.
Добавляем методы: structureJoin
В класс BaseModelMethods.php добавляем метод createTableAlias и т.к этод метод влияет на работу методов: createFields,
showColumns(BaseModel), делаем в них соотвествующие изменения.